/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
## IF COMPOSITE PRIMARY KEY : GENERATE A JAVA CLASS FOR THIS COMPOSITE KEY
#if ( $entity.hasCompositePrimaryKey() )
// This Bean has a composite Primary Key  
$generator.generate($target.entityName ,  "${entity.name}Key.java", $target.folder, "jpa_bean_pk.vm"  )
#else 
// This Bean has a basic Primary Key (not composite) 
#end

package ${target.javaPackageFromFolder($SRC)};

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

#foreach( $import in $entity.imports )
import $import;
#end

import javax.persistence.*;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
##--------------------------------------------------------------------------------------------------------
## Data fields list ( list of fields used as bean property with getter/setter )
## Data fields = fields not in Primary Key    
## #set( $dataFields = $entity.nonKeyAttributes )
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY ) )
##--------------------------------------------------------------------------------------------------------

/**
 * Persistent class for entity stored in table "${entity.databaseTable}"
 *
 * @author Telosys Tools Generator
 *
 */
@XmlRootElement  // JAXB annotation for REST Web Services
@XmlAccessorType(XmlAccessType.PROPERTY) // JAXB accessor = getter/setter pair
$entity.jpaAnnotations
// Define named queries here
// @NamedQueries ( {
//  @NamedQuery ( name="${entity.name}.query1", query="SELECT x FROM ${entity.name} x WHERE  " ),
//  @NamedQuery ( name="${entity.name}.query2", query="SELECT x FROM ${entity.name} x WHERE  " )
// } )
public class $entity.name implements Serializable
{
    private static final long serialVersionUID = 1L;

#if ( $entity.hasCompositePrimaryKey() )
    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( EMBEDDED IN AN EXTERNAL CLASS )  
    //----------------------------------------------------------------------
	@EmbeddedId
    private ${entity.name}Key compositePrimaryKey ;

#else 
    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
#foreach( $field in $entity.keyAttributes )
$field.jpaAnnotations(4)
    private $field.formatedType(10) $field.formatedName(12) #if($field.hasInitialValue())= ${field.initialValue} #end;
#end

#end

    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
#foreach( $field in $dataFields )
$field.jpaAnnotations(4)
    private $field.formatedType(10) $field.formatedName(12) #if($field.hasInitialValue())= ${field.initialValue} #end;

#end

    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public ${entity.name}()
    {
		super();
#if ( $entity.hasCompositePrimaryKey() )        
		this.compositePrimaryKey = new ${entity.name}Key();       
#end
    }
    
#if ( $entity.hasCompositePrimaryKey() )
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE COMPOSITE KEY 
    //----------------------------------------------------------------------
##	public ${entity.name}Key getKey() {
##        return key;
##    }
## 
##    public void setKey(${entity.name}Key key) {
##        this.key = key;
##    }
##
#foreach( $field in $entity.keyAttributes )
#if ( $field.setter )    public void ${field.setter}( $field.type $field.name )
    {
        this.compositePrimaryKey.${field.setter}( $field.name ) ;
    }
#end
#if ( $field.getter )    public $field.type ${field.getter}()
    {
        return this.compositePrimaryKey.${field.getter}() ;
    }
#end
#end

#else 
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
#foreach( $field in $entity.keyAttributes )
#if ( $field.setter )    public void ${field.setter}( $field.type $field.name )
    {
        this.$field.name = $field.name ;
    }
#end
#if ( $field.getter )    public $field.type ${field.getter}()
    {
        return this.$field.name;
    }
#end
#end
#end

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
#foreach( $field in $dataFields )
#if ( $field.databaseName )    //--- DATABASE MAPPING : $field.databaseName ( $field.databaseType ) 
#end
#if ( $field.setter )    public void ${field.setter}( $field.type $field.name )
    {
        this.$field.name = $field.name;
    }
#end
#if ( $field.getter )    public $field.type ${field.getter}()
    {
        return this.$field.name;
    }
#end

#end  

    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString()
    {
## #set( $attributes = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_TEXT, $const.NOT_IN_SELECTED_LINKS ) )    
#set( $attributes = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_TEXT ) )
$entity.toStringMethodCodeLinesWithKey(8, $attributes, "compositePrimaryKey") 
## The "key" is used only if composite key
#foreach( $field in $entity.getAttributesByCriteria( $const.TEXT ) )
		// $field.name is not in toString because it's a "long text" field
#end  
    }

}
